services:
  traefik:
    image: traefik:latest
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--api.dashboard=true"
      - "--providers.docker.exposedByDefault=false"
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always

  authentik-proxy:
    image: ghcr.io/goauthentik/proxy
    environment:
      AUTHENTIK_HOST: $AUTHENTIK_HOST
      AUTHENTIK_INSECURE: "true"
      AUTHENTIK_TOKEN: $AUTHENTIK_TOKEN
      AUTHENTIK_DEBUG: "true"
    labels:
      traefik.enable: true
      traefik.port: 9000
      traefik.http.routers.proxy.rule: Host(`$TRAEFIK_HOST`) && PathPrefix(`/outpost.goauthentik.io`)
      traefik.http.middlewares.authentik.forwardauth.address: http://authentik-proxy:9000/outpost.goauthentik.io/auth/traefik
      traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: true
      traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-aut>
    restart: unless-stopped
    networks:
      - backend

  postgres:
    image: postgres:12.2
    volumes:
      - postgres_data:/data/postgres
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      PGDATA: /data/postgres
    networks:
      - backend
    restart: always

  booking:
    build:
      context: ./back
      dockerfile: Dockerfile
    command: bun run src/index.ts --service=booking
    networks:
      - backend
    depends_on:
      - postgres
      - authentik-proxy
    environment:
      SERVICE: booking
    labels:
      traefik.enable: true
      traefik.http.routers.booking.rule: Host(`$TRAEFIK_HOST`) && PathPrefix(`/api/booking`)
      traefik.http.middlewares.booking-strip-prefix.stripprefix.prefixes: /api/booking
      traefik.http.routers.booking.middlewares: authentik,booking-strip-prefix
      traefik.http.services.booking.loadbalancer.server.port: 3000

  search:
    build:
      context: ./back
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      - postgres
      - authentik-proxy
    environment:
      SERVICE: search
    labels:
      traefik.enable: true
      traefik.http.routers.search.rule: Host(`$TRAEFIK_HOST`) && PathPrefix(`/api/search`)
      traefik.http.middlewares.search-strip-prefix.stripprefix.prefixes: /api/search
      traefik.http.routers.search.middlewares: authentik,search-strip-prefix
      traefik.http.services.search.loadbalancer.server.port: 3000

  housing:
    build:
      context: ./back
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      - postgres
      - authentik-proxy
    environment:
      SERVICE: housing
    labels:
      traefik.enable: true
      traefik.http.routers.housing.rule: Host(`$TRAEFIK_HOST`) && PathPrefix(`/api/housing`)
      traefik.http.middlewares.housing-strip-prefix.stripprefix.prefixes: /api/housing
      traefik.http.routers.housing.middlewares: authentik,housing-strip-prefix
      traefik.http.services.housing.loadbalancer.server.port: 3000

  users:
    build:
      context: ./back
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      - postgres
      - authentik-proxy
    environment:
      SERVICE: users
    labels:
      traefik.enable: true
      traefik.http.routers.users.rule: Host(`$TRAEFIK_HOST`) && PathPrefix(`/api/users`)
      traefik.http.middlewares.users-strip-prefix.stripprefix.prefixes: /api/users
      traefik.http.routers.users.middlewares: authentik,users-strip-prefix
      traefik.http.services.users.loadbalancer.server.port: 3000

  background:
    build:
      context: ./back
      dockerfile: Dockerfile
    environment:
      SERVICE: background
    networks:
      - backend

  front:
    build:
      context: ./front
      dockerfile: Dockerfile
    networks:
      - backend
    labels:
      traefik.enable: true
      traefik.http.routers.front.rule: Host(`$TRAEFIK_HOST`)
      traefik.http.routers.front.entrypoints: web
      traefik.http.services.front.loadbalancer.server.port: 3000
      traefik.http.routers.front.middlewares: authentik

networks:
  backend:

volumes:
  postgres_data:
